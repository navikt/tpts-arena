#
# Run with program argument --spring.config.name=localhost for this configuration to take effect.
#
# Will keep looking for a localhost Kafka broker, see spring.kafka.bootstrap-servers.
# Also, you might want to change app.arena.kafka.consumer.topic to match your local setup.
#

spring:
  application:
    name: "tpts-arena"
  kafka:
    bootstrap-servers: "localhost:9092" # Your local Docker.
    consumer:
      auto-commit-interval: 100
      auto-offset-reset: latest
      enable-auto-commit: true
      group-id: ${spring.application.name}
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

springdoc:
  swagger-ui:
    oauth:
      use-pkce-with-authorization-code-grant: true
      client-id: ${AZURE_APP_CLIENT_ID}

management:
  endpoint:
    health:
      probes:
        enabled: true
  endpoints:
    web:
      exposure:
        include: health, prometheus

logging:
  config: classpath:logback-localhost.xml

app:
  azure:
    tenantId: ${AZURE_APP_TENANT_ID}
    clientId: ${AZURE_APP_CLIENT_ID}
    wellKnown: ${AZURE_APP_WELL_KNOWN_URL}
  arena:
    soap:
      sts:
        url: "https://security-token-service.dev.adeo.no/rest/v1/sts/token"
        username: ${SERVICEUSER_USERNAME}
        password: ${SERVICEUSER_PASSWORD}
      endpoints:
        ytelseskontrakt: "https://arena-q1.adeo.no/ail_ws/Ytelseskontrakt_v3"

no.nav.security.jwt:
  issuer:
    azure:
      discoveryurl: ${AZURE_APP_WELL_KNOWN_URL}
      accepted_audience: ${AZURE_APP_CLIENT_ID}

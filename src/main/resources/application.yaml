spring:
  application:
    name: "tpts-arena"
  main:
    banner-mode: off
  kafka:
    bootstrap-servers: ${KAFKA_BROKERS}
    consumer:
      auto-commit-interval: 100
      auto-offset-reset: latest
      enable-auto-commit: true
      group-id: ${spring.application.name}
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    properties:
      security:
        protocol: "SSL"
      ssl:
        keystore:
          type: "PKCS12"
          location: ${KAFKA_KEYSTORE_PATH}
          password: ${KAFKA_CREDSTORE_PASSWORD}
        truststore:
          type: "PKCS12"
          location: ${KAFKA_TRUSTSTORE_PATH}
          password: ${KAFKA_CREDSTORE_PASSWORD}
      specific.avro.reader: true
      schema.registry.url: ${KAFKA_SCHEMA_REGISTRY}
      basic.auth:
        credentials.source: USER_INFO
        user.info: ${KAFKA_SCHEMA_REGISTRY_USER}:${KAFKA_SCHEMA_REGISTRY_PASSWORD}

server:
  shutdown: graceful

management:
  metrics:
    export:
      prometheus:
        enabled: true
  endpoints:
    web:
      exposure:
        include: info, health, metrics, prometheus

app:
  arena:
    kafka:
      consumer:
        #topic: "aura.kafkarator-canary-dev-gcp"
        topic: "teamdokumenthandtering.aapen-dok-journalfoering-q1"